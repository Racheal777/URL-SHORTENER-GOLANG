
services:
  api:
    build: .
    container_name: url-api
    env_file:
      - .env
    environment:
        - DB_NAME=${DB_NAME}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_HOST=db
        - DB_PORT=5432
        - REDIS_HOST=${REDIS_HOST}
        - REDIS_PORT=${REDIS_PORT}
        - ENDPOINT=${ENDPOINT}
        - DB_SSLMODE=${DB_SSLMODE}
        - DB_TIMEZONE=${DB_TIMEZONE}

    ports:
      - "8080:8080"
    depends_on:
       db:
            condition: service_healthy
       cache:
            condition: service_healthy

    healthcheck:
      test: [ "CMD", "nc", "-z", "db", "5432" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: > 
      sh -c "while ! nc -z cache 6379; do sleep 1; done &&
              while ! nc -z db 5432; do sleep 1; done &&
              ./main"

    networks:
      - url-network


  db:
    image: postgres:alpine
    container_name: url_postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - url-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
        interval: 5s
        timeout: 5s
        retries: 5

  cache:
    image: redis:6
    container_name: url_redis
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "6379:6379"
    networks:
      - url-network
    volumes:
      - cache_data:/app
    healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 5s
        timeout: 5s
        retries: 5



volumes:
    postgres_data:
    cache_data:

networks:
  url-network:
    driver: bridge